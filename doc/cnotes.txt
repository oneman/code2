/*C Notes

* https://oeis.org/A006577

The sum of the steps required to reach one bit of first twenty six integers is 

    1     2    3    4    5    6    7    8    9   10   11   12   13
    00 + 01 + 07 + 02 + 05 + 08 + 16 + 03 + 19 + 06 + 14 + 09 + 09 = 99
    17 + 17 + 04 + 12 + 20 + 20 + 07 + 07 + 15 + 15 + 10 + 23 + 10 = 177
    14   15   16   17   18   19   20   21   22   23   24   25   26
    
    = 276
 26 = 276/26 + 276%26

The number 27 takes 111 steps.
 
It is well known that powers of two expressed in binary have exactly that many
least significant zero bits ie 2^3 = 8 = 1000. It is not well known that powers
of twenty six also have this property.

calc "1 + 7 + 2 + 5 + 8 + 16 + 03 + 19 + 6 + 14 + 9 + 9"
"1 + 7 + 2 + 5 + 8 + 16 + 03 + 19 + 6 + 14 + 9 + 9" base 0: result 99
calc "17 + 17 + 04 + 12 + 20 + 20 + 07 + 07 + 15 + 15 + 10 + 23 + 10"
"17 + 17 + 04 + 12 + 20 + 20 + 07 + 07 + 15 + 15 + 10 + 23 + 10" base 0: result 177
calc "(276/26)+(276%26)"
"(276/26)+(276%26)" base 0: result 26
calc "(111+276)"
"(111+276)" base 0: result 387
calc "1000-(111+276)"
"1000-(111+276)" base 0: result 613
calc "16/26"
"16/26" base 0: result 0
calc "1000-(111+276)"
"1000-(111+276)" base 0: result 613
calc "1000+(111+276)"
"1000+(111+276)" base 0: result 1387
calc "13+87"
"13+87" base 0: result 100
calc "6+1+3"
"6+1+3" base 0: result 10
calc "1387+613"
"1387+613" base 0: result 2000
calc "2+3+5+7+11+13+17+37+79+113+199+337"
"2+3+5+7+11+13+17+37+79+113+199+337" base 0: result 823
calc 823+177
"823+177" base 0: result 1000
calc 8+2+3
"8+2+3" base 0: result 13
2+3+5+7+11+13+17+31+37+71+73+79+97+113+131+199+311+337+373+733+919+991
calc "13+17+31+37+71+73+79+97+113+131+199+311+337+373+733"
"13+17+31+37+71+73+79+97+113+131+199+311+337+373+733" base 0: result 2615
calc "199+311"
"199+311" base 0: result 510
calc "510*510"
"510*510" base 0: result 260100

*/
diff --git a/source.c b/source.c
index 460d8d2..cad47e2 100644
--- a/source.c
+++ b/source.c
@@ -246,6 +246,23 @@ int EFAIL(char *msg) {
 }
 
 int main(int argc, char *argv[]) {
+  mpz_t a, z;
+  mpz_init_set_str(a, "1", 10);
+  mpz_init_set_str(z, "26", 10);
+  for (int i = 1; i < 57; i++) {
+    mpz_ui_pow_ui(a, 26, i);
+    gmp_printf("26^%d: %Zd\n", i, a);
+    char *bs = mpz_get_str(0, 2, a);
+    printf("%zu bits\n", strlen(bs));
+    printf("%s\n", bs);
+    free(bs);
+  }
+  mpz_clear(a);
+  mpz_clear(z);
+  return 0;
+}
+
+int main2(int argc, char *argv[]) {
   u64 E = 0;
   time_t T = time(0);
   time_t T0 = T;
